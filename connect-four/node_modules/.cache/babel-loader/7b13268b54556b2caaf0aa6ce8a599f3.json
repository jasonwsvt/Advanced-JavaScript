{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\GitHub\\\\Advanced-Javascript\\\\ConnectFour\\\\src\\\\components\\\\App\\\\App.tsx\";\nimport React from \"react\";\nimport Board from \"../Board/Board\";\nimport styles from \"./App.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      chipsPositions: {},\n      playerTurn: \"red\",\n      gameStatus: \"It's red's turn\"\n    };\n\n    this.calculateGameStatus = (playerTurn, chipsPositions) => {\n      const {\n        columns,\n        rows\n      } = this.props; // Check four in a row horizontally\n\n      for (let row = 0; row < rows; row++) {\n        let repetitionCountStatus = {\n          playerChip: \"\",\n          count: 0\n        };\n\n        for (let column = 0; column < columns; column++) {\n          const chip = chipsPositions[`${row}:${column}`]; // If there is a chip in that position, and it belongs\n          // to a player, count that chip for that player\n          // (either increase the count or start over)\n\n          if (chip && chip === repetitionCountStatus.playerChip) {\n            repetitionCountStatus.count++;\n          } else {\n            repetitionCountStatus = {\n              playerChip: chip,\n              count: 1\n            };\n          } // If the count for a player is 4, that player won\n\n\n          if (repetitionCountStatus.count === 4) {\n            return `Player ${repetitionCountStatus.playerChip} won!`;\n          }\n        }\n      } // Check four in a row vertically\n\n\n      for (let column = 0; column < columns; column++) {\n        let repetitionCountStatus = {\n          playerChip: \"\",\n          count: 0\n        };\n\n        for (let row = 0; row < rows; row++) {\n          const chip = chipsPositions[`${row}:${column}`]; // If there is a chip in that position, and it belongs\n          // to a player, count that chip for that player\n          // (either increase the count or start over)\n\n          if (chip && chip === repetitionCountStatus.playerChip) {\n            repetitionCountStatus.count++;\n          } else {\n            repetitionCountStatus = {\n              playerChip: chip,\n              count: 1\n            };\n          } // If the count for a player is 4, that player won\n\n\n          if (repetitionCountStatus.count === 4) {\n            return `Player ${repetitionCountStatus.playerChip} won!`;\n          }\n        }\n      } // TODO: Check four in a row diagonally\n\n\n      return `It's ${playerTurn}'s turn`;\n    };\n\n    this.handleTileClick = tileId => {\n      const {\n        chipsPositions,\n        playerTurn\n      } = this.state; // Get the last empty tile of the column\n\n      const column = parseInt(tileId.split(\":\")[1]);\n      let lastEmptyTileId = this.getLastEmptyTile(column); // If there is no empty tile in the column, do nothing\n\n      if (!lastEmptyTileId) return; // Add chip to empty tile\n\n      const newChipsPositions = { ...chipsPositions,\n        [lastEmptyTileId]: playerTurn\n      }; // Change player turn\n\n      const newPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\"; // Calculate game status\n\n      const gameStatus = this.calculateGameStatus(newPlayerTurn, newChipsPositions); // Save new state\n\n      this.setState({\n        chipsPositions: newChipsPositions,\n        playerTurn: newPlayerTurn,\n        gameStatus\n      });\n    };\n  }\n\n  getLastEmptyTile(column) {\n    const {\n      rows\n    } = this.props;\n    const {\n      chipsPositions\n    } = this.state;\n\n    for (let row = rows - 1; row >= 0; row--) {\n      const tileId = `${row}:${column}`;\n      if (!chipsPositions[tileId]) return tileId;\n    }\n  }\n\n  renderBoard() {\n    const {\n      columns,\n      rows\n    } = this.props;\n    const {\n      chipsPositions\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Board, {\n      columns: columns,\n      rows: rows,\n      chipsPositions: chipsPositions,\n      onTileClick: this.handleTileClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 4\n    }, this);\n  }\n\n  renderStatusMessage() {\n    const {\n      gameStatus\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.statusMessage,\n      children: gameStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 10\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.app,\n      children: [this.renderBoard(), this.renderStatusMessage()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/Advanced-Javascript/ConnectFour/src/components/App/App.tsx"],"names":["React","Board","styles","App","PureComponent","state","chipsPositions","playerTurn","gameStatus","calculateGameStatus","columns","rows","props","row","repetitionCountStatus","playerChip","count","column","chip","handleTileClick","tileId","parseInt","split","lastEmptyTileId","getLastEmptyTile","newChipsPositions","newPlayerTurn","setState","renderBoard","renderStatusMessage","statusMessage","render","app"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Board from \"../Board/Board\";\r\nimport { Props, State, ChipsPositions } from \"./types\";\r\nimport styles from \"./App.module.css\";\r\n\r\nexport default class App extends React.PureComponent<Props, State> {\r\n\tstate: State = {\r\n\t\tchipsPositions: {},\r\n\t\tplayerTurn: \"red\",\r\n\t\tgameStatus: \"It's red's turn\"\r\n\t}\r\n\r\n\tcalculateGameStatus = (playerTurn: string, chipsPositions: ChipsPositions): string => {\r\n\t\tconst { columns, rows } = this.props;\r\n\r\n\t\t// Check four in a row horizontally\r\n\t\tfor (let row = 0; row < rows; row++) {\r\n\t\t\tlet repetitionCountStatus = { playerChip: \"\", count: 0 };\r\n\r\n\t\t\tfor (let column = 0; column < columns; column++) {\r\n\t\t\t\tconst chip = chipsPositions[`${row}:${column}`];\r\n\r\n\t\t\t\t// If there is a chip in that position, and it belongs\r\n\t\t\t\t// to a player, count that chip for that player\r\n\t\t\t\t// (either increase the count or start over)\r\n\t\t\t\tif (chip && chip === repetitionCountStatus.playerChip) {\r\n\t\t\t\t\trepetitionCountStatus.count++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\trepetitionCountStatus = { playerChip: chip, count: 1 };\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the count for a player is 4, that player won\r\n\t\t\t\tif (repetitionCountStatus.count === 4) {\r\n\t\t\t\t\treturn `Player ${repetitionCountStatus.playerChip} won!`;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check four in a row vertically\r\n\t\tfor (let column = 0; column < columns; column++) {\r\n\t\t\tlet repetitionCountStatus = { playerChip: \"\", count: 0 };\r\n\r\n\t\t\tfor (let row=0; row < rows; row++) {\r\n\t\t\t\tconst chip = chipsPositions[`${row}:${column}`];\r\n\r\n\t\t\t\t// If there is a chip in that position, and it belongs\r\n\t\t\t\t// to a player, count that chip for that player\r\n\t\t\t\t// (either increase the count or start over)\r\n\t\t\t\tif (chip && chip === repetitionCountStatus.playerChip) {\r\n\t\t\t\t\trepetitionCountStatus.count++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\trepetitionCountStatus = { playerChip: chip, count: 1 };\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the count for a player is 4, that player won\r\n\t\t\t\tif (repetitionCountStatus.count === 4) {\r\n\t\t\t\t\treturn `Player ${repetitionCountStatus.playerChip} won!`;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO: Check four in a row diagonally\r\n\r\n\t\treturn `It's ${playerTurn}'s turn`;\r\n\t}\r\n\r\n\tgetLastEmptyTile(column: number) {\r\n\t\tconst { rows } = this.props;\r\n\t\tconst { chipsPositions } = this.state;\r\n\r\n\t\tfor (let row = rows - 1; row >= 0; row--) {\r\n\t\t\tconst tileId = `${row}:${column}`;\r\n\t\t\tif (!chipsPositions[tileId]) return tileId;\r\n\t\t}\r\n\t}\r\n\r\n\thandleTileClick = (tileId: string) => {\r\n\t\tconst { chipsPositions, playerTurn } = this.state;\r\n\r\n\t\t// Get the last empty tile of the column\r\n\t\tconst column = parseInt(tileId.split(\":\")[1]);\r\n\t\tlet lastEmptyTileId = this.getLastEmptyTile(column);\r\n\r\n\t\t// If there is no empty tile in the column, do nothing\r\n\t\tif (!lastEmptyTileId) return;\r\n\r\n\t\t// Add chip to empty tile\r\n\t\tconst newChipsPositions = {\r\n\t\t\t...chipsPositions,\r\n\t\t\t[lastEmptyTileId]: playerTurn\r\n\t\t}\r\n\r\n\t\t// Change player turn\r\n\t\tconst newPlayerTurn = playerTurn === \"red\" ? \"yellow\" : \"red\";\r\n\r\n\t\t// Calculate game status\r\n\t\tconst gameStatus = this.calculateGameStatus(newPlayerTurn, newChipsPositions);\r\n\r\n\t\t// Save new state\r\n\t\tthis.setState({chipsPositions: newChipsPositions, playerTurn: newPlayerTurn, gameStatus })\r\n\t}\r\n\r\n\trenderBoard() {\r\n\t\tconst { columns, rows } = this.props;\r\n\t\tconst { chipsPositions } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<Board\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t\trows={rows}\r\n\t\t\t\tchipsPositions={chipsPositions}\r\n\t\t\t\tonTileClick={this.handleTileClick}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n\r\n\trenderStatusMessage() {\r\n\t\tconst { gameStatus } = this.state;\r\n\t\treturn <div className={styles.statusMessage}>{gameStatus}</div>;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={styles.app}>\r\n\t\t\t\t{this.renderBoard()}\r\n\t\t\t\t{this.renderStatusMessage()}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}